// *************************************
//
//   Mixins
//
// *************************************


// -------------------------------------
//   Same size of
//   width, height & line-height
// -------------------------------------

@mixin same-whl($size) {
  width: $size;
  height: $size;
  line-height: $size;
}


// -------------------------------------
//   Remove inline spacing 
//   (only use in wrapper)
// -------------------------------------

@mixin remove-spacing($_children, $_fontSize: $font-base) {
  font-size: 0;
  #{$_children} {
    font-size: $_fontSize;
  }
}


// -------------------------------------
//   inline Vertical
//   (combine with absolute element)
// -------------------------------------

@mixin inline-vertical() {
  &:before {
    content: "";
    display: inline-block;
    width: 0;
    height: 100%;
    vertical-align: middle;
  }
  > * {
    display: inline-block;
    vertical-align: middle;
  }
}


// -------------------------------------
//  Text-overflow Ellipsis
// -------------------------------------

@mixin overflow-ellipsis($_width: 100%) {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  width: $_width;
}


// -------------------------------------
//   Hide Scrollbar
// -------------------------------------

@mixin hide-scrollbar {
  overflow: auto;
  -ms-overflow-style: none;
  &::-webkit-scrollbar {
    width: 0 !important;
  }
}


// -------------------------------------
//   Breakpoint - media queries 
// -------------------------------------

@mixin bp($point) {
  $bp-desktop:          "(min-width: 1200px)";
  $bp-pad-landscape:    "(max-width: 1024px)";
  $bp-pad-portrait:     "(max-width: 768px)";
  $bp-mobile:           "(max-width: 640px)";
  $bp-mobile-landscape: "(max-width: 568px)";
  $bp-mobile-portrait:  "(max-width: 375px)";

  @if $point == desktop {
    @media #{$bp-desktop} { @content; }
  }
  @else if $point == padL {
    @media #{$bp-pad-landscape} { @content; }
  }
  @else if $point == padP {
    @media #{$bp-pad-portrait} { @content; }
  }
  @else if $point == mobile {
    @media #{$bp-mobile} { @content; }
  }
  @else if $point == mobileL {
    @media #{$bp-mobile-landscape} { @content; }
  }
  @else if $point == mobileP {
    @media #{$bp-mobile-portrait} { @content; }
  }
}


// -------------------------------------
//   z-index
// -------------------------------------

@function map-has-nested-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  }
  @return true;
}
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}
@function z($layers...) {
  @if not map-has-nested-keys($z-layers, $layers...) {
    @warn "No layer found for `#{inspect($layers...)}` in $z-layers map. Property omitted.";
  } 
  @return map-deep-get($z-layers, $layers...);
}


// -------------------------------------
//   Linear Gradients
// -------------------------------------

/// Convert angle
/// @author Chris Eppstein
/// @param {Number} $value - Value to convert
/// @param {String} $unit - Unit to convert to
/// @return {Number} Converted angle
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }
  
  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
  
  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }
  
  $conversion-map: ( 
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );
    
  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }
  
  @return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient 
/// as well as a plain color fallback 
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }
  
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}
